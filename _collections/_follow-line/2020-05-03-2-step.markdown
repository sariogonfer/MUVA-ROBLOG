---
layout: post
title:  "Second step. The driver."
date:   20120-05-01 00:00:00 +0200
image: https://i.ytimg.com/vi/s5qnuPEzf2w/maxresdefault.jpg
rating: 5
---

**IMPORTANT: This step was implemented using the online platform. At the of write this post, the platform is unavailable. For that reason, image for this steam cannot be attached.**

Once we know how the platform works, and the main actions that can be performed with the car, the next step is to give intelligence to our car. First, to continue keeping a cleaned code, we are going to define a class named *Driver*. This class contains the necessary logic to handle the car. Also, this class will be used as base class to future classes.

```python
def stop_car():
    fl.motors.sendV(0)
    fl.motors.sendW(0)

class Driver(object):
    def __init__(self, algorithm, car):
        self.algorithm = algorithm
        self.car = car
        self.err = 0
        self._V = 0
        self._W = 0
        
    @property
    def V(self):
        return self._V
        
    @property
    def W(self):
        return self._W
        
    @V.setter
    def V(self, V):
        self.car.sendV(V)
        self._V = V
        
    @W.setter
    def W(self, W):
        self.car.sendW(W)
        self._W = W
        
    def _process_image(self):
        aux = cv2.cvtColor(self.image, cv2.COLOR_BGR2HSV)
        aux = cv2.inRange(aux, value_min_HSV, value_max_HSV)
        
        return aux
        
    def process_image(self):
        self.filtered_image = self._process_image()
        
    def on_new_image(self):
        self.image = self.algorithm.getImage()
        self.process_image()
        self.update_view()
        self.react()
        
    def update_view(self):
        def _put_text(img, msg, orig):
            im = cv2.putText(
                img, msg, orig, 
                cv2.FONT_HERSHEY_SIMPLEX ,  
                1, (0, 255, 0), 
                1, cv2.LINE_AA
            ) 
            return im
            
        r_i = cv2.cvtColor(
            self.filtered_image, cv2.COLOR_GRAY2BGR
        )
        l_i = _put_text(self.image.copy(), 'V: {}'.format(self.V), (10, 30))
        l_i = _put_text(l_i, 'W: {}'.format(self.W), (10, 60))
        l_i = _put_text(l_i, 'err: {}'.format(self.err), (10, 90))
        
        self.algorithm.set_threshold_image(
            np.hstack((l_i, r_i))
        )
        
    def react(self):
        pass    
```
Using this class as base, we are going to define our first driver: *AIkkonen.*

```python
class AIkkonen(Driver):    
    def _calc_error(self):
        try:
            aux = np.where(self.filtered_image[260] == 255)[0]
            self.err = 320 - ((aux[-1] + aux[0]) / 2)
        except:
            pass
        
    def react(self):
        self._calc_error()
        self.V = max([1, 12 - (abs(self.err) * 0.03)])
        self.W = self.err * 0.007
```

This driver is very simple and slow, but it can do a lap to the circle. The multipliers are calculated trial-and-error basis.

The way to activate a driver is the following: 

```python
fl.algorithm.driver = AIkkonen(fl.algorithm, fl.motors)

def execute(self):
    try:
        self.driver.on_new_image()
    except Exception as e:
        sys.stdout.write('\r' + str(e))
    
stop_car()
fl.setExecute(execute)
```

In the next steps, we are going to improve this driver.



