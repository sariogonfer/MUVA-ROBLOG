---
layout: post
title:  "Fourth step. O rei."
date:   2020-05-02 00:00:00 +0200
image: /MUVA-ROBLOG/assets/images/follow-line/main.png
rating: 5
---

To test the code implemented in this step, the platform where is executed has been changed. This new platform is developed by JdeRobot and can be run in local. 
Likewise, in previous steps the logic and controllers of the system was implemented as part of a driver, in this step a new driver will be implemented: *AIrtonSenna*. This driver, like the previous one, implements a PD controller. The use of a PID has been discard due to the use of the integral part is not good in this situation. This driver acts different depending on whether the car is in a straight line or in a curve.

```python
def is_curve(line):
    g = np.gradient(np.gradient(line))

    # left positive, rigth negative
    return not np.all(np.abs(g) < 2), [1, -1][line[0] > line[2]]

class AIrtonSenna(Driver):
    def __init__(self, algorithm, motors):
        self.KpW = [0.015, 0.015]
        self.KdW = [0.01, 0.02]
        self.KpV = [-0.1, -0.04]
        self.KdV = [0.2, -0.02]
        self.MAX_SPEED = [40, 18]
        self.d_err = 0
        self.prev_times = np.zeros(3)
        self.prev_errs = np.zeros(3)
        self.in_curve = (False, 1)

        super(AIrtonSenna, self).__init__(algorithm, motors)

    def update_view(self):
        def _put_text(img, msg, orig):
            im = cv2.putText(
                img, msg, orig,
                cv2.FONT_HERSHEY_SIMPLEX ,
                1, (0, 255, 0),
                1, cv2.LINE_AA
			)
            return im

        r_i = cv2.cvtColor(
            self.filtered_image, cv2.COLOR_GRAY2BGR
        )
        l_i = _put_text(r_i, 'V: {}'.format(self.V), (10, 30))
        l_i = _put_text(l_i, 'W: {}'.format(self.W), (10, 60))
        l_i = _put_text(l_i, 'err: {}'.format(self.err), (10, 90))
        l_i = _put_text(l_i, 'd_err: {}'.format(self.d_err), (10, 120))
        l_i = _put_text(l_i, 'curve: {}'.format(self.in_curve), (10, 150))

        # self.algorithm.set_threshold_image(
        #     np.hstack((l_i, r_i))
        # )
        self.algorithm.set_threshold_image(l_i)

    def _calc_line(self):
        self.line = calc_mid_line(self.filtered_image)

    def _check_curve(self):
        try:
            self.in_curve = is_curve(self.line)
        except:
            pass

    def _calc_error_if_curve(self):
        return self.line[0] + (self.line[-1] / 3)

    def _calc_error_if_no_curve(self):
        return self.line[0] + (self.line[-1] / 6)

    def _calc_error(self):
        aux = (
            self._calc_error_if_curve()
            if self.in_curve else
            self._calc_error_if_no_curve()
        )
        err = 320 - self.line[4] if len(self.line) else self.err
        self.prev_errs[:-1] = self.prev_errs[1:]
        self.prev_errs[-1] = np.absolute(err)
        self.d_err = (
            (self.prev_errs[-1] - self.prev_errs[0])
        )

        self.err = err

    def _calc_V(self):
        max_speed = self.MAX_SPEED[self.in_curve[0]]
        v = np.clip(
            max_speed +
            (np.abs(self.err) * self.KpV[self.in_curve[0]]) +
            self.d_err * self.KdV[self.in_curve[0]],
            5, max_speed
        )

        return v

    def _calc_W(self):
        p = self.err * self.KpW[self.in_curve[0]]
        d = np.sign(self.err) * self.d_err * self.KdW[self.in_curve[0]]
        limit = [
            np.array([-2, 2]),
            np.array([-2, 2])
        ][self.in_curve[0]]
        w = np.clip(p + d, *limit)
        sys.stdout.write(
            '\r P: {:6.5f} D: {:6.5f} W: {:6.5f}'.format(p, d, w))

        return w

    def react(self):
        self._calc_line()
        self._calc_error()
        self._check_curve()
        self.V = self._calc_V()
        self.W = self._calc_W()
```

AIrtonSenna can to detect when the car is tracking a curve or is in a rect. On this way, it can calculate the W and V in a differente way.

Next video shows this driver doing a entire lap to the circuit.

<iframe width="560" height="315" src="https://www.youtube.com/embed/Fk-SKJxWCxw" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
