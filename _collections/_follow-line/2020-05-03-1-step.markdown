---
layout: post
title:  "Follow line. First step."
date:   2019-10-18 19:20:33 +0200
image: /MUVA-ROBLOG/assets/images/follow-line/main.png
rating: 5
description: Follow line. First step.
---

**IMPORTANT: This step was implemented using the online platform. At the of write this post, the platform is unavailable. For that reason, image for this steam cannot be attached.**

The first step is to be familiar with the environment. To do this, small blocks of code will be added each time. First, show the image returned by the 'cam' of car anf try to start up the car.

```python
def execute(self):
    image = self.getImage()
    self.motors.sendV(1)
    self.motors.sendW(1)
    self.set_threshold_image(image)
    
fl.setExecute(execute)
```

The second block of code implemented is used to process the image. The objective of this process is identified the line that the car must follow. Trying to keep clean the code, a function for this purpose is implemented. Firstly, this function transforms the image from BGR to HSV. Then, filter the values.

```python
value_min_HSV = np.array([0, 235, 60])
value_max_HSV = np.array([180, 255, 255])

def process_image(image):
    bw_i = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)
    bw_i = cv2.inRange(bw_i, value_min_HSV, value_max_HSV)
    
    return bw_i

def execute(self):
    image = self.getImage()
    bw_i = process_image(image)
    self.set_threshold_image(bw_i)
        
fl.setExecute(execute)
```

One trick to handle the exceptions and errors raised by our code is enclosing this code in a try-except block.

```python
def execute(self):
    try:
        image = self.getImage()
        bw_i = process_image(image)
        self.set_threshold_image(bw_i)
    except Exception as e:
        sys.stdout.write('\r' + str(e))
```

This is all for this first step.

